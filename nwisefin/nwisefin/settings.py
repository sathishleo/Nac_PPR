"""
Django settings for nwisefin project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from environs import Env
import distutils.util
from datetime import timedelta

env = Env()
env.read_env()
DB_ENGINE = env.str('DB_ENGINE')
DB_USER = env.str('DB_USER')
DB_PASSWORD = env.str('DB_PASSWORD')
DB_HOST = env.str('DB_HOST')
DB_PORT = env.str('DB_PORT')
DB_NAME_nwisefindb = env.str('DB_NAME_nwisefindb')
DB_NAME_narcdb = env.str('DB_NAME_narcdb')
DB_NAME_capitalsdb = env.str('DB_NAME_capitalsdb')
DB_NAME_masterdb = env.str('DB_NAME_masterdb')
DB_NAME_vendordb = env.str('DB_NAME_vendordb')
DB_NAME_memodb = env.str('DB_NAME_memodb')
DB_NAME_tadb = env.str('DB_NAME_tadb')
DB_NAME_foundation = env.str('DB_NAME_foundation')
DB_NAME_ias_im = env.str('DB_NAME_ias_im')
DB_NAME_docdb = env.str('DB_NAME_docdb')
DB_NAME_inwarddb = env.str('DB_NAME_inwarddb')
DB_NAME_entrydb = env.str('DB_NAME_entrydb')
DB_NAME_jvdb = env.str('DB_NAME_jvdb')
DB_NAME_apdb = env.str('DB_NAME_apdb')
DB_NAME_necf = env.str('DB_NAME_necf')
DB_NAME_nfa = env.str('DB_NAME_nfa')



micro_userservice = env.str('MICRO_USERSERVICE')
micro_vendorservice = env.str('MICRO_VENDORSERVICE')
micro_masterservice = env.str('MICRO_MASTERSERVICE')
micro_docservice = env.str('MICRO_DOCSERVICE')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'y_tv8x$kgg-5-g0j-mtl^3iqp^yzs9#!jef+a2x%e2n+5yi!pj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
CORS_ORIGIN_ALLOW_ALL=True


# Application definition
DEFAULT_AUTO_FIELD='django.db.models.BigAutoField'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'knox',
    'pprservice',


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'middleware.scopemiddleware.ScopeMiddleware'
]

ROOT_URLCONF = 'nwisefin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

DEFAULT_AUTHENTICATION_CLASSES: (
    'utilityservice.service.NWisefinAuthentication', # custom authentication class
    ...
)

WSGI_APPLICATION = 'nwisefin.wsgi.application'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')
MEDIA_URL= "media/"



# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': DB_ENGINE,
                'NAME': DB_NAME_nwisefindb,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'narcdb': {
        'ENGINE': DB_ENGINE,
                'NAME':DB_NAME_narcdb,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'capitalsdb': {
        'ENGINE': DB_ENGINE,
                'NAME': DB_NAME_capitalsdb,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'masterdb': {
        'ENGINE': DB_ENGINE,
                'NAME': DB_NAME_masterdb,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'vendordb': {
        'ENGINE': DB_ENGINE,
                'NAME': DB_NAME_vendordb,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'memodb': {
        'ENGINE': DB_ENGINE,
                'NAME': DB_NAME_memodb,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'tadb': {
        'ENGINE': DB_ENGINE,
                'NAME': DB_NAME_tadb,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'foundation': {
        'ENGINE': DB_ENGINE,
                'NAME': DB_NAME_foundation,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'ias_im': {
        'ENGINE': DB_ENGINE,
                'NAME': DB_NAME_ias_im,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'docdb': {
        'ENGINE': DB_ENGINE,
                'NAME': DB_NAME_docdb,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'inwardservice': {
        'ENGINE': DB_ENGINE,
                'NAME': DB_NAME_inwarddb,
                'USER': DB_USER,
                'PASSWORD': DB_PASSWORD,
                'PORT': DB_PORT,
                'HOST': DB_HOST
    },
    'entry': {
        'ENGINE': DB_ENGINE,
            'NAME': DB_NAME_entrydb,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'PORT': DB_PORT,
            'HOST': DB_HOST
    },
    'jv': {
        'ENGINE': DB_ENGINE,
            'NAME': DB_NAME_jvdb,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'PORT': DB_PORT,
            'HOST': DB_HOST
    },
    'ecf': {
        'ENGINE': DB_ENGINE,
        'NAME': DB_NAME_necf,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'PORT': DB_PORT,
        'HOST': DB_HOST
    },
    'napservice': {
        'ENGINE': DB_ENGINE,
        'NAME': DB_NAME_apdb,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'PORT': DB_PORT,
        'HOST': DB_HOST
    },
    'faservicedb': {
      'ENGINE': DB_ENGINE,
      'NAME': DB_NAME_nfa,
      'USER': DB_USER,
      'PASSWORD': DB_PASSWORD,
      'PORT': DB_PORT,
      'HOST': DB_HOST
  }

}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
VYSFIN_URL=env.str('WISEFIN_URL')
CLIENT_URL=env.str('APIGEE_URL')
CLIENT_SECRET = env.str('APIGEE_CLIENT_SECRET')
ADURL_KEY =env.str('APIGEE_CLIENT_ID')
BUCKET_NAME_FOR_ASSETS =env.str('APPLICATION_ASSET_BUCKET_NAME')

import logging
# log_path = '/var/log/app.custom.out.stderr.log'
logger = logging.getLogger(__name__)
# logging.basicConfig(filename=log_path,
#                       format='%(asctime)s -%(levelname)s - %(message)s',
#                      level=logging.INFO)

APPLICATION_BE_URL= env.str('APPLICATION_BE_URL')
SERVER_IP=APPLICATION_BE_URL

REST_KNOX = {
  'SECURE_HASH_ALGORITHM': 'cryptography.hazmat.primitives.hashes.SHA512',
  'AUTH_TOKEN_CHARACTER_LENGTH': 64,
  'TOKEN_TTL': None,
  'USER_SERIALIZER': 'knox.serializers.UserSerializer',
  'TOKEN_LIMIT_PER_USER': 1,
  'AUTO_REFRESH': False
}

# login environment
ADFS_LOGIN = distutils.util.strtobool(env('ADFS_LOGIN_ENABLE'))
TOKEN_URL = env('TOKEN_URL')
CLIENT_ID = env('CLIENT_ID')
REDIRECT_URI = env('APP_URL')

# apschedulercontroller.scheduler_trigger_Trailbalance_Report()